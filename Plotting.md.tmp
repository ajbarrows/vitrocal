<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/2.0.3/jquery.min.js"></script>
<script>
(function() {
  function addWidgetsRenderer() {
    var requireJsScript = document.createElement('script');
    requireJsScript.src = 'https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.4/require.min.js';

    var mimeElement = document.querySelector('script[type="application/vnd.jupyter.widget-view+json"]');
    var jupyterWidgetsScript = document.createElement('script');
    var widgetRendererSrc = 'https://unpkg.com/@jupyter-widgets/html-manager@*/dist/embed-amd.js';
    var widgetState;

    // Fallback for older version:
    try {
      widgetState = mimeElement && JSON.parse(mimeElement.innerHTML);

      if (widgetState && (widgetState.version_major < 2 || !widgetState.version_major)) {
        widgetRendererSrc = 'jupyter-js-widgets@*/dist/embed.js';
      }
    } catch(e) {}

    jupyterWidgetsScript.src = widgetRendererSrc;

    document.body.appendChild(requireJsScript);
    document.body.appendChild(jupyterWidgetsScript);
  }

  document.addEventListener('DOMContentLoaded', addWidgetsRenderer);
}());
</script>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/mpmbq2/vitrocal/master?urlpath=lab%2Ftree%2Fdocs%2FPlotting.ipynb)
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
# Example Vitrocal Plotting
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
This is meant to be a surface-level example of what an author might want to do.
See that Matplotlib and Seaborn documentation for more details.
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
import seaborn as sns

from vitrocal.analyzers import StandardAnalyzer
from vitrocal.plotting import plot_events, plot_average_event
```

</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
Load results from the Parameter Tune example
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
events = pd.read_pickle("./data/02_output/demo_events.pkl") # python dictionary
analyzer = pd.read_pickle("./data/02_output/demo_analyzer.pkl") # python object
result = pd.read_csv("./data/02_output/demo_results.csv")
avg_result = pd.read_csv("./data/02_output/demo_avg_results.csv")
```

</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
## Plot average traces
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
global_average, roi_average, event_data = analyzer.find_average_event(events)
global_average.head()
```

</div>
<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">
<div class="output_area" markdown="1">
<table>
<thead>
<tr>
<th style="text-align:right"><br/><br/>index</th>
<th style="text-align:right">q1<br/><br/> </th>
<th style="text-align:right">q3<br/><br/> </th>
<th style="text-align:right">median<br/><br/> </th>
<th style="text-align:right">mean<br/><br/> </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:right">0</td>
<td style="text-align:right">-3.00963</td>
<td style="text-align:right">8.86682</td>
<td style="text-align:right">1.29585</td>
<td style="text-align:right">3.84374</td>
</tr>
<tr>
<td style="text-align:right">1</td>
<td style="text-align:right">24.6512</td>
<td style="text-align:right">48.0814</td>
<td style="text-align:right">33.9981</td>
<td style="text-align:right">40.1769</td>
</tr>
<tr>
<td style="text-align:right">2</td>
<td style="text-align:right">3.18477</td>
<td style="text-align:right">26.4741</td>
<td style="text-align:right">12.8264</td>
<td style="text-align:right">17.6446</td>
</tr>
<tr>
<td style="text-align:right">3</td>
<td style="text-align:right">3.05635</td>
<td style="text-align:right">25.6205</td>
<td style="text-align:right">12.851</td>
<td style="text-align:right">17.9426</td>
</tr>
<tr>
<td style="text-align:right">4</td>
<td style="text-align:right">2.526</td>
<td style="text-align:right">25.4279</td>
<td style="text-align:right">11.7944</td>
<td style="text-align:right">17.0295</td>
</tr>
</tbody>
</table>
</div>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
plot_average_event(global_average.head(), # only plot the first 5 seconds
                   title = "Average Detected Event",
                   ylabel = "df/F",
                   xlabel = "Time (s)",
                   line_color = "black",
                   fill_color = 'C0')               
```

</div>
<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">
<div class="output_area" markdown="1">
<div class="output_png output_subarea">
<img alt="No description has been provided for this image" src="output_8_0.png"/>
</div>
</div>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
selected_roi = 15
plot_average_event(roi_average[roi_average['roi'] == selected_roi],
                   title='Average Event for ROI {}'.format(selected_roi))
```

</div>
<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">
<div class="output_area" markdown="1">
<div class="output_png output_subarea">
<img alt="No description has been provided for this image" src="output_9_0.png"/>
</div>
</div>
</div>
</div>
</div>
<div class="cell border-box-sizing text_cell rendered" markdown="1">
<div class="inner_cell" markdown="1">
<div class="text_cell_render border-box-sizing rendered_html" markdown="1">
## Plot Event Counts
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
# add arbitrary goupings for demonstration
arbitrary_groups = np.repeat(['group1', 'group2', 'group3'], len(avg_result)/3)
avg_result['group'] = arbitrary_groups
```

</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
sns.pointplot(data=avg_result, x='average_peak', y='group', hue='group')
```

</div>
<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">
<div class="output_area" markdown="1">
<div class="output_text output_subarea output_execute_result">
<pre>
<code>&lt;Axes: xlabel='average_peak', ylabel='group'&gt;</code>
</pre>
</div>
</div>
<div class="output_area" markdown="1">
<div class="output_png output_subarea">
<img alt="No description has been provided for this image" src="output_12_1.png"/>
</div>
</div>
</div>
</div>
</div>
<div class="cell border-box-sizing code_cell rendered" markdown="1">
<div class="input">

```python
# alternatively
sns.histplot(data=avg_result, x='average_peak', hue='group', kde=True)
```

</div>
<div class="output_wrapper" markdown="1">
<div class="output" markdown="1">
<div class="output_area" markdown="1">
<div class="output_text output_subarea output_execute_result">
<pre>
<code>&lt;Axes: xlabel='average_peak', ylabel='Count'&gt;</code>
</pre>
</div>
</div>
<div class="output_area" markdown="1">
<div class="output_png output_subarea">
<img alt="No description has been provided for this image" src="output_13_1.png"/>
</div>
</div>
</div>
</div>
</div>
